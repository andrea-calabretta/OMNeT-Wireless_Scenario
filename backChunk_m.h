//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/nexthop/backChunk.msg.
//

#ifndef __INET_BACKCHUNK_M_H
#define __INET_BACKCHUNK_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class backChunk;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/nexthop/backChunk.msg:7</tt> by nedtool.
 * <pre>
 * class backChunk extends FieldsChunk
 * {
 *     chunkLength = B(8); //Chunk Length
 *     B lengthField = B(2); //Chunk field length
 *     L3Address src; //Source Address
 *     L3Address dst; //Destination Address
 *     int seq = 0; //Sequence Number
 * }
 * </pre>
 */
class INET_API backChunk : public ::inet::FieldsChunk
{
  protected:
    B lengthField = B(2);
    L3Address src;
    L3Address dst;
    int seq = 0;

  private:
    void copy(const backChunk& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const backChunk&);

  public:
    backChunk();
    backChunk(const backChunk& other);
    virtual ~backChunk();
    backChunk& operator=(const backChunk& other);
    virtual backChunk *dup() const override {return new backChunk(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual B getLengthField() const;
    virtual void setLengthField(B lengthField);
    virtual const L3Address& getSrc() const;
    virtual L3Address& getSrcForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<backChunk*>(this)->getSrc());}
    virtual void setSrc(const L3Address& src);
    virtual const L3Address& getDst() const;
    virtual L3Address& getDstForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<backChunk*>(this)->getDst());}
    virtual void setDst(const L3Address& dst);
    virtual int getSeq() const;
    virtual void setSeq(int seq);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const backChunk& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, backChunk& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_BACKCHUNK_M_H

